
CREATE TABLE Users (
USER_ID NUMBER NOT NULL,
FIRST_NAME VARCHAR2(100) NOT NULL,
LAST_NAME VARCHAR2(100) NOT NULL,
YEAR_OF_BIRTH INTEGER,
MONTH_OF_BIRTH INTEGER,
DAY_OF_BIRTH INTEGER,
GENDER VARCHAR2(100),
PRIMARY KEY (USER_ID));


CREATE TABLE Friends (
USER1_ID NUMBER NOT NULL,
USER2_ID NUMBER NOT NULL,
PRIMARY KEY (USER1_ID, USER2_ID),
FOREIGN KEY (USER1_ID) REFERENCES Users(USER_ID),
FOREIGN KEY (USER2_ID) REFERENCES Users(USER_ID));


CREATE TRIGGER order_friends_pairs
	BEFORE INSERT ON Friends
	FOR EACH ROW
		DECLARE temp NUMBER;
		BEGIN
			IF :NEW.USER1_ID > :NEW.USER2_ID THEN
				temp := :NEW.USER2_ID;
				:NEW.USER2_ID := :NEW.USER1_ID;
				:NEW.USER1_ID := temp;
			END IF;
		END;
/


CREATE TABLE Cities (
CITY_ID INTEGER NOT NULL,
CITY_NAME VARCHAR2(100) NOT NULL,
STATE_NAME VARCHAR2(100) NOT NULL,
COUNTRY_NAME VARCHAR2(100) NOT NULL,
PRIMARY KEY (CITY_ID));

CREATE SEQUENCE City_Seq
START WITH 1
INCREMENT BY 1;

CREATE TRIGGER City_Tri
	BEFORE INSERT ON Cities
	FOR EACH ROW
	BEGIN
		SELECT City_Seq.NEXTVAL INTO :NEW.CITY_ID FROM DUAL;
	END;
/


CREATE TABLE User_Current_Cities (
USER_ID NUMBER NOT NULL,
CURRENT_CITY_ID INTEGER NOT NULL,
PRIMARY KEY (USER_ID),
FOREIGN KEY (USER_ID) REFERENCES Users,
FOREIGN KEY (CURRENT_CITY_ID) REFERENCES Cities(CITY_ID));


CREATE TABLE User_Hometown_Cities (
USER_ID NUMBER NOT NULL,
HOMETOWN_CITY_ID INTEGER NOT NULL,
PRIMARY KEY (USER_ID),
FOREIGN KEY (USER_ID) REFERENCES Users,
FOREIGN KEY (HOMETOWN_CITY_ID) REFERENCES Cities(CITY_ID));


CREATE TABLE Messages (
MESSAGE_ID NUMBER NOT NULL,
SENDER_ID NUMBER NOT NULL,
RECEIVER_ID NUMBER NOT NULL,
MESSAGE_CONTENT VARCHAR2(2000) NOT NULL,
SENT_TIME TIMESTAMP NOT NULL,
PRIMARY KEY (MESSAGE_ID),
FOREIGN KEY (SENDER_ID) REFERENCES Users(USER_ID),
FOREIGN KEY (RECEIVER_ID) REFERENCES Users(USER_ID));


CREATE TABLE Programs (
PROGRAM_ID INTEGER NOT NULL,
INSTITUTION VARCHAR2(100) NOT NULL,
CONCENTRATION VARCHAR2(100) NOT NULL,
DEGREE VARCHAR2(100) NOT NULL,
UNIQUE (INSTITUTION, CONCENTRATION, DEGREE),
PRIMARY KEY (PROGRAM_ID));

CREATE SEQUENCE Program_Seq
START WITH 1
INCREMENT BY 1;

CREATE TRIGGER Program_Tri
	BEFORE INSERT ON Programs
	FOR EACH ROW
	BEGIN
		SELECT Program_Seq.NEXTVAL INTO :NEW.PROGRAM_ID FROM DUAL;
	END;
/


CREATE TABLE Education (
USER_ID NUMBER NOT NULL,
PROGRAM_ID INTEGER NOT NULL,
PROGRAM_YEAR INTEGER NOT NULL,
PRIMARY KEY (USER_ID, PROGRAM_ID),
FOREIGN KEY (USER_ID) REFERENCES Users,
FOREIGN KEY (PROGRAM_ID) REFERENCES Programs);


CREATE TABLE User_Events (
EVENT_ID NUMBER NOT NULL,
EVENT_CREATOR_ID NUMBER NOT NULL,
EVENT_NAME VARCHAR2(100) NOT NULL,
EVENT_TAGLINE VARCHAR2(100),
EVENT_DESCRIPTION VARCHAR2(100),
EVENT_HOST VARCHAR2(100),
EVENT_TYPE VARCHAR2(100),
EVENT_SUBTYPE VARCHAR2(100),
EVENT_ADDRESS VARCHAR2(2000),
EVENT_CITY_ID INTEGER NOT NULL,
EVENT_START_TIME TIMESTAMP,
EVENT_END_TIME TIMESTAMP,
PRIMARY KEY (EVENT_ID),
FOREIGN KEY (EVENT_CREATOR_ID) REFERENCES Users(USER_ID),
FOREIGN KEY (EVENT_CITY_ID) REFERENCES Cities(CITY_ID));


CREATE TABLE Participants (
EVENT_ID NUMBER NOT NULL,
USER_ID NUMBER NOT NULL,
CONFIRMATION VARCHAR2(100) NOT NULL,
PRIMARY KEY (USER_ID, EVENT_ID),
FOREIGN KEY (USER_ID) REFERENCES Users,
FOREIGN KEY (EVENT_ID) REFERENCES User_Events,
CONSTRAINT Confirm_Status 
CHECK (CONFIRMATION IN ('attending', 'unsure', 'declined', 'not_replied')));


CREATE TABLE Albums (
ALBUM_ID NUMBER NOT NULL,
ALBUM_OWNER_ID NUMBER NOT NULL,
ALBUM_NAME VARCHAR2(100) NOT NULL,
ALBUM_CREATED_TIME TIMESTAMP NOT NULL,
ALBUM_MODIFIED_TIME TIMESTAMP,
ALBUM_LINK VARCHAR2(100) NOT NULL,
ALBUM_VISIBILITY VARCHAR2(100) NOT NULL,
COVER_PHOTO_ID NUMBER NOT NULL,
PRIMARY KEY (ALBUM_ID),
FOREIGN KEY (ALBUM_OWNER_ID) REFERENCES Users(USER_ID),
CONSTRAINT Visibility_Limit 
CHECK (ALBUM_VISIBILITY IN ('EVERYONE', 'FRIENDS', 'FRIENDS_OF_FRIENDS', 'MYSELF')));


CREATE TABLE Photos (
PHOTO_ID NUMBER NOT NULL,
ALBUM_ID NUMBER NOT NULL,
PHOTO_CAPTION VARCHAR2(2000),
PHOTO_CREATED_TIME TIMESTAMP NOT NULL,
PHOTO_MODIFIED_TIME TIMESTAMP,
PHOTO_LINK VARCHAR2(2000) NOT NULL,
PRIMARY KEY (PHOTO_ID));


ALTER TABLE Albums
ADD CONSTRAINT Cover_Limit
FOREIGN KEY (COVER_PHOTO_ID) REFERENCES Photos(PHOTO_ID) INITIALLY DEFERRED DEFERRABLE;

ALTER TABLE Photos
ADD CONSTRAINT Album_Limit
FOREIGN KEY (ALBUM_ID) REFERENCES Albums INITIALLY DEFERRED DEFERRABLE;






CREATE TABLE Tags (
TAG_PHOTO_ID NUMBER NOT NULL,
TAG_SUBJECT_ID NUMBER NOT NULL,
TAG_CREATED_TIME TIMESTAMP NOT NULL,
TAG_X NUMBER NOT NULL,
TAG_Y NUMBER NOT NULL,
PRIMARY KEY (TAG_PHOTO_ID, TAG_SUBJECT_ID),
FOREIGN KEY (TAG_PHOTO_ID) REFERENCES Photos(PHOTO_ID),
FOREIGN KEY (TAG_SUBJECT_ID) REFERENCES Users(USER_ID));































